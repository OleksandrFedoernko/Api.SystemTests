// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VismaIdella.Vips.TaskManagement.Api.SystemTests.Features.Users
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateUserFeature : object, Xunit.IClassFixture<CreateUserFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateUser.feature"
#line hidden
        
        public CreateUserFeature(CreateUserFeature.FixtureData fixtureData, VismaIdella_Vips_TaskManagement_Api_SystemTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Users", "CreateUser", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create user with allowed user types")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateUser")]
        [Xunit.TraitAttribute("Description", "Create user with allowed user types")]
        [Xunit.InlineDataAttribute("user_id_", "userName", "userDescription", "BACKOFFICE_PROFESSIONAL", new string[0])]
        [Xunit.InlineDataAttribute("user_id_", "userName2", "userDescription", "CLIENT_SYSTEM", new string[0])]
        [Xunit.InlineDataAttribute("user_id_ _", "userNameWithoutDesc", "", "BACKOFFICE_PROFESSIONAL", new string[0])]
        public void CreateUserWithAllowedUserTypes(string user_Id, string name, string description, string requesting_User_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_id", user_Id);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create user with allowed user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given(string.Format("id which will be used for creating user is {0}", user_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And(string.Format("name which will be used for creating user is {0}", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.And(string.Format("description which will be used for creating user is {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And(string.Format("requesting_user_type is \"{0}\"", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And("header user_id is \"user_id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("requesting_user_id is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.When("post user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("status code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And(string.Format("response body from post user equals {0}, {1}, {2}", user_Id, name, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create user with forbidden user types")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateUser")]
        [Xunit.TraitAttribute("Description", "Create user with forbidden user types")]
        [Xunit.InlineDataAttribute("forbiddenid", "EMPLOYER", new string[0])]
        [Xunit.InlineDataAttribute("forbiddenid", "PATRICIPANT", new string[0])]
        public void CreateUserWithForbiddenUserTypes(string user_Id, string requesting_User_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_id", user_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create user with forbidden user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.Given(string.Format("id which will be used for creating user is {0}", user_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.And("name which will be used for creating user is <name>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("description which will be used for creating user is <description>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And(string.Format("requesting_user_type is \"{0}\"", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("header user_id is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("requesting_user_id is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.When("post user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("status code should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.And("forbidden request message from create user request should have text \"Access to th" +
                        "is resource is denied\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("error code should be \"INVALID_ACCESS_RIGHTS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create user by inserting wrong data")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateUser")]
        [Xunit.TraitAttribute("Description", "Create user by inserting wrong data")]
        [Xunit.InlineDataAttribute("testUserId", "badrequestname", "testId", "BACKOFFICE_PROFESSIONAL", "id", "user_id", "UserId is not valid", new string[0])]
        [Xunit.InlineDataAttribute("", "badrequestname", "testId", "BACKOFFICE_PROFESSIONAL", "id", "user_id", "Required query parameter is empty", new string[0])]
        [Xunit.InlineDataAttribute("test_id_25", "", "testId", "BACKOFFICE_PROFESSIONAL", "id", "name", "\'User Name\' must not be empty.", new string[0])]
        [Xunit.InlineDataAttribute("test_id_25", "badrequestname", "", "BACKOFFICE_PROFESSIONAL", "id", "requesting_user_id", "Field cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("test_id_25", "badrequestname", "testId", "", "id", "requesting_user_type", "Field cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("test_id_25", "badrequestname", "testId", "BACKOFFICE_PROFESSIONAL", "", "user_id", "Field cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("test_id_25", "badrequestname", "testId", "BACKOFFICE_PROFESSIONAL", "userdoesntexist", "user_id", "User with this ID doesn\'t exist.", new string[0])]
        public void CreateUserByInsertingWrongData(string user_Id, string name, string requesting_User_Id, string requesting_User_Type, string header_User_Id, string field, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_id", user_Id);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("header_user_id", header_User_Id);
            argumentsOfScenario.Add("field", field);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create user by inserting wrong data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
 testRunner.Given(string.Format("id which will be used for creating bad user is {0}", user_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.And(string.Format("name which will be used for creating user is {0}", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And(string.Format("requesting_user_type is \"{0}\"", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And(string.Format("header_user_id is \"{0}\"", header_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And(string.Format("requesting_user_id is \"{0}\"", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.When("post user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And(string.Format("bad request message from create user request should have text {0} in the field {1" +
                            "}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("error code should be \"INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Send empty request body")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateUser")]
        [Xunit.TraitAttribute("Description", "Send empty request body")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "user_id", "Required query parameter is empty", new string[0])]
        public void SendEmptyRequestBody(string requesting_User_Type, string field, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("field", field);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send empty request body", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given(string.Format("requesting_user_type is \"{0}\"", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.And("header_user_id is \"<header_user_id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("requesting_user_id is \"<requesting_user_id>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.When("post user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And(string.Format("bad request message from create user request should have text {0} in the field {1" +
                            "}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("error code should be \"INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create user with same user_id")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateUser")]
        [Xunit.TraitAttribute("Description", "Create user with same user_id")]
        [Xunit.InlineDataAttribute("test_user_id", "name", new string[0])]
        public void CreateUserWithSameUser_Id(string user_Id, string name, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_id", user_Id);
            argumentsOfScenario.Add("name", name);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create user with same user_id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
 testRunner.Given("id which will be used for creating user with same id is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
 testRunner.And(string.Format("name which will be used for creating user is {0}", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.Given("requesting_user_type is \"BACKOFFICE_PROFESSIONAL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.And("header user_id is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("requesting_user_id is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.When("post user request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then("status code should be 409", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.And("error code should be \"RESOURCE_ALREADY_EXISTS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateUserFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateUserFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
