// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VismaIdella.Vips.TaskManagement.Api.SystemTests.Features.Tasks
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetTaskHistoryByIdFeature : object, Xunit.IClassFixture<GetTaskHistoryByIdFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetTaskHistoryById.feature"
#line hidden
        
        public GetTaskHistoryByIdFeature(GetTaskHistoryByIdFeature.FixtureData fixtureData, VismaIdella_Vips_TaskManagement_Api_SystemTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Tasks", "GetTaskHistoryById", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
    testRunner.Given("storage ids which will be used for creating task before getting task history are " +
                    "\"participant-storage-testid2\", \"employer-storage-testid1\", \"storagetestid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
    testRunner.And("requesting user id which will be used for creating task before getting task histo" +
                    "ry is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
    testRunner.And("requesting user type which will be used for creating task before getting task his" +
                    "tory \"BACKOFFICE_PROFESSIONAL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.And("header user id which will used for creating task before getting task history \"id\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.When("post task for get task history request with first id is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.And("post task for get task history request with second id is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And("post task for get task history request with third id is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
    testRunner.Then("I save task ids", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get history of a task after creating it using backoffice & client system user typ" +
            "es")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get history of a task after creating it using backoffice & client system user typ" +
            "es")]
        [Xunit.TraitAttribute("Category", "retry")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        public void GetHistoryOfATaskAfterCreatingItUsingBackofficeClientSystemUserTypes(string requesting_User_Type, string changed_By_User_Id, string changed_By_User, string changed_By_User_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "retry"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("changed_by_user_id", changed_By_User_Id);
            argumentsOfScenario.Add("changed_by_user", changed_By_User);
            argumentsOfScenario.Add("changed_by_user_type", changed_By_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get history of a task after creating it using backoffice & client system user typ" +
                    "es", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Given("task id which will be used for getting history is an id of created task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
    testRunner.And(string.Format("requesting user type which will be used for getting task history is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.When("get task history request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.And(string.Format("response body from get task history should contain {0}, {1}, {2}", changed_By_User_Id, changed_By_User, changed_By_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And("I delete unused task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get history of a task after creating it using participant user type")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get history of a task after creating it using participant user type")]
        [Xunit.InlineDataAttribute("testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        [Xunit.InlineDataAttribute("testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        public void GetHistoryOfATaskAfterCreatingItUsingParticipantUserType(string changed_By_User_Id, string changed_By_User, string changed_By_User_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("changed_by_user_id", changed_By_User_Id);
            argumentsOfScenario.Add("changed_by_user", changed_By_User);
            argumentsOfScenario.Add("changed_by_user_type", changed_By_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get history of a task after creating it using participant user type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 27
    testRunner.Given("task id which will be used for getting history is an id of created task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
    testRunner.And("requesting user id which will be used for getting task history for participant ty" +
                        "pe is the ending of storage id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And("requesting user type which will be used for getting task history for participant " +
                        "type is \"PARTICIPANT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.When("get task history request for participant is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.And(string.Format("response body from get task history should contain {0}, {1}, {2}", changed_By_User_Id, changed_By_User, changed_By_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And("I delete unused task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get history of a task after creating it using employer user type")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get history of a task after creating it using employer user type")]
        [Xunit.InlineDataAttribute("testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        [Xunit.InlineDataAttribute("testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        public void GetHistoryOfATaskAfterCreatingItUsingEmployerUserType(string changed_By_User_Id, string changed_By_User, string changed_By_User_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("changed_by_user_id", changed_By_User_Id);
            argumentsOfScenario.Add("changed_by_user", changed_By_User);
            argumentsOfScenario.Add("changed_by_user_type", changed_By_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get history of a task after creating it using employer user type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 40
    testRunner.Given("task id which will be used for getting history is an id of created task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
    testRunner.And("requesting user id which will be used for getting task history for employer type " +
                        "is the ending of storage id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.And("requesting user type which will be used for getting task history for employer typ" +
                        "e is \"EMPLOYER\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.When("get task history request for employer is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.And(string.Format("response body from get task history should contain {0}, {1}, {2}", changed_By_User_Id, changed_By_User, changed_By_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("I delete unused task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get history of updated task using backoffice and client system user types", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get history of updated task using backoffice and client system user types")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        public void GetHistoryOfUpdatedTaskUsingBackofficeAndClientSystemUserTypes(string requesting_User_Type, string changed_By_User_Id, string changed_By_User, string changed_By_User_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("changed_by_user_id", changed_By_User_Id);
            argumentsOfScenario.Add("changed_by_user", changed_By_User);
            argumentsOfScenario.Add("changed_by_user_type", changed_By_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get history of updated task using backoffice and client system user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 54
    testRunner.Given("task id which will be used for getting history is an id of created task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
    testRunner.And(string.Format("requesting user type which will be used for getting task history is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And("description which will be used for updating task is \"new desc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
    testRunner.When("update task for getting its history request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.And("get task history request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.And(string.Format("response body from get task history should contain {0}, {1}, {2}", changed_By_User_Id, changed_By_User, changed_By_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("changed items should have old and new values after update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get history of deleted task", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get history of deleted task")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "testId", "testUser", "BACKOFFICE_PROFESSIONAL", new string[0])]
        public void GetHistoryOfDeletedTask(string requesting_User_Type, string changed_By_User_Id, string changed_By_User, string changed_By_User_Type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("changed_by_user_id", changed_By_User_Id);
            argumentsOfScenario.Add("changed_by_user", changed_By_User);
            argumentsOfScenario.Add("changed_by_user_type", changed_By_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get history of deleted task", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 69
    testRunner.Given("task id which will be used for getting history is an id of created task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
    testRunner.And(string.Format("requesting user type which will be used for getting task history is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.When("delete task for getting its history is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.And("get task history request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.And(string.Format("response body from get task history should contain {0}, {1}, {2}", changed_By_User_Id, changed_By_User, changed_By_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And("changes field should have null items after getting history after delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("I delete unused task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get history of a task with forbidden user types")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get history of a task with forbidden user types")]
        [Xunit.InlineDataAttribute("PARTICIPANT", new string[0])]
        [Xunit.InlineDataAttribute("EMPLOYER", new string[0])]
        public void GetHistoryOfATaskWithForbiddenUserTypes(string requesting_User_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get history of a task with forbidden user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 83
    testRunner.Given("task id which will be used for getting history is an id of created task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
    testRunner.And(string.Format("requesting user type which will be used for getting task history is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.When("get task history request with forbidden task id is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("status code should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
    testRunner.And("forbidden request message from get task history request should have text \"Access " +
                        "to this resource is denied.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
    testRunner.And("error code should be \"TASK_MGMT_INVALID_ACCESS_RIGHTS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get task by id inserting incorrect data")]
        [Xunit.TraitAttribute("FeatureTitle", "GetTaskHistoryById")]
        [Xunit.TraitAttribute("Description", "Get task by id inserting incorrect data")]
        [Xunit.InlineDataAttribute("", "BACKOFFICE_PROFESSIONAL", "id", "Field cannot be empty.", "requesting_user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "", "id", "Field cannot be empty.", "requesting_user_type", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "", "Field cannot be empty.", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "tenatiddoesntexist", "User with this ID doesnt exist.", "user_id", new string[0])]
        public void GetTaskByIdInsertingIncorrectData(string requesting_User_Id, string requesting_User_Type, string header_User_Id, string message, string field, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("header_user_id", header_User_Id);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("field", field);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get task by id inserting incorrect data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 95
    testRunner.Given("task id which will be used for getting history is \"historytaskid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
    testRunner.And(string.Format("requesting user id which will be used for getting task history with wrong data is" +
                            " {0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.And(string.Format("requesting user type which will be used for getting task history is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And(string.Format("header user id which will be used for getting task history is with wrong data is " +
                            "{0}", header_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.When("get task history request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
    testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.And(string.Format("bad request message from get task history request should have text {0} in the fie" +
                            "ld {1}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
    testRunner.And("error code should be \"TASKMGMT_INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetTaskHistoryByIdFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetTaskHistoryByIdFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
