// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VismaIdella.Vips.TaskManagement.Api.SystemTests.Features.Tasks
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateTaskFeature : object, Xunit.IClassFixture<CreateTaskFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateTask.feature"
#line hidden
        
        public CreateTaskFeature(CreateTaskFeature.FixtureData fixtureData, VismaIdella_Vips_TaskManagement_Api_SystemTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Tasks", "CreateTask", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
    testRunner.Given("header user id which will be used for creating task is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.And("requesting user id which will be used for creating task is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create task using correct user types and inserting valid inputs")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateTask")]
        [Xunit.TraitAttribute("Description", "Create task using correct user types and inserting valid inputs")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storagetestidfirst733", "backOfficeRef-id", "backOfficeCor-id", "backOfficeCaus-id", "backOfficeProcess", "backofficeTaskTitle", "backofficeTaskDesc", "backofficeTaskIcon", "https://backoffice", "25", "85", "good", "string", "good", "me", "2023-06-29T12:50:14.6155887Z", "", "true", "121212", "212121", "2", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storagetestidfirst733", "backOfficeRef-id", "backOfficeCor-id", "backOfficeCaus-id", "backOfficeProcess", "backofficeTaskTitle", "backofficeTaskDesc", "backofficeTaskIcon", "https://backoffice", "25", "85", "good", "string", "good", "me", "2023-06-29T12:50:14.6155887Z", "2023-07-04T12:50:14.6155887Z", "true", "121212", "212121", "2", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "storagetestidsecond848", "clientSysRef-id", "clientSysCor-id", "clientSysCaus-id", "clientSysProcess", "clientSysTaskTitle", "clientSysTaskDesc", "clientSysTaskIcon", "https://clientSys", "10", "30", "excellent", "SAASAS", "excellent", "someone", "2023-07-05T12:50:14.6155887Z", "2023-07-07T12:50:14.6155887Z", "true", "343534", "545454", "2", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storagetestidfirst733", "backOfficeRef-id", "backOfficeCor-id", "backOfficeCaus-id", "backOfficeProcess", "backofficeTaskTitle", "backofficeTaskDesc", "backofficeTaskIcon", "https://backoffice", "10", "100", "excellent", "SAASAS", "excellent", "someone", "2023-07-05T12:50:14.6155887Z", "2023-07-07T12:50:14.6155887Z", "false", "686767", "65667", "2", new string[0])]
        public void CreateTaskUsingCorrectUserTypesAndInsertingValidInputs(
                    string requesting_User_Type, 
                    string storage_Id, 
                    string reference_Id, 
                    string correlation_Id, 
                    string causation_Id, 
                    string origin, 
                    string title, 
                    string description, 
                    string icon, 
                    string related_Entity, 
                    string priority, 
                    string percent_Complete, 
                    string possible_Outcome1, 
                    string possible_Outcome2, 
                    string chosen_Outcome, 
                    string assigned_To, 
                    string start_Date_Time, 
                    string due_Date_Time, 
                    string require_Chosen_Outcome, 
                    string reviewer1, 
                    string reviewer2, 
                    string minimum_Reviewers, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("reference_id", reference_Id);
            argumentsOfScenario.Add("correlation_id", correlation_Id);
            argumentsOfScenario.Add("causation_id", causation_Id);
            argumentsOfScenario.Add("origin", origin);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("icon", icon);
            argumentsOfScenario.Add("related_entity", related_Entity);
            argumentsOfScenario.Add("priority", priority);
            argumentsOfScenario.Add("percent_complete", percent_Complete);
            argumentsOfScenario.Add("possible_outcome1", possible_Outcome1);
            argumentsOfScenario.Add("possible_outcome2", possible_Outcome2);
            argumentsOfScenario.Add("chosen_outcome", chosen_Outcome);
            argumentsOfScenario.Add("assigned_to", assigned_To);
            argumentsOfScenario.Add("start_date_time", start_Date_Time);
            argumentsOfScenario.Add("due_date_time", due_Date_Time);
            argumentsOfScenario.Add("require_chosen_outcome", require_Chosen_Outcome);
            argumentsOfScenario.Add("reviewer1", reviewer1);
            argumentsOfScenario.Add("reviewer2", reviewer2);
            argumentsOfScenario.Add("minimum_reviewers", minimum_Reviewers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create task using correct user types and inserting valid inputs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 8
    testRunner.And(string.Format("requesting user type which will be used for creating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And(string.Format("storage id which will be used for creating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.And(string.Format("reference id which will be used for creating task is {0}", reference_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And(string.Format("correlation id which will be used for creating task is {0}", correlation_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
    testRunner.And(string.Format("causation id which will be used for creating task is {0}", causation_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.And(string.Format("name of the process which will be used for creating task is {0}", origin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
    testRunner.And(string.Format("title which will be used for creating task is {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.And(string.Format("description which will be used creating task is {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And(string.Format("icon which will be used for creating task is {0}", icon), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And(string.Format("related entity which will be used for creating task is {0}", related_Entity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And(string.Format("priority which will be used for creating task is {0}", priority), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And(string.Format("percent complete which will be used for creating task is {0}", percent_Complete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And(string.Format("possible outcomes which will be used for creating task are {0} {1}", possible_Outcome1, possible_Outcome2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And(string.Format("chosen outcome which will be used for creating task is {0}", chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And(string.Format("assigned to which will be used for creating task is {0}", assigned_To), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And(string.Format("start date time which will be used for creating task is {0}", start_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And(string.Format("due date time which will be used for creating task is {0}", due_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And(string.Format("require chosen outcome is {0}", require_Chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And(string.Format("reviewers are {0} {1}", reviewer1, reviewer2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And(string.Format("number of minimum reviewers is {0}", minimum_Reviewers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.When("post task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("status code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And("response body from create task should be valid according to json schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("I delete task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create task inserting date offset")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateTask")]
        [Xunit.TraitAttribute("Description", "Create task inserting date offset")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storagetestidfirst356", "5", "BUSINESS_DAYS", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storageiddoesntexist", "10", "CALENDAR_DAYS", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "idalreadycreated", "1", "BUSINESS_DAYS", new string[0])]
        public void CreateTaskInsertingDateOffset(string requesting_User_Type, string storage_Id, string number_Of_Days, string offset_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("number_of_days", number_Of_Days);
            argumentsOfScenario.Add("offset_type", offset_Type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create task inserting date offset", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 40
    testRunner.And(string.Format("requesting user type which will be used for creating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.And(string.Format("storage id which will be used for creating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.And(string.Format("number of days in due_date_offset field is {0}", number_Of_Days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.And(string.Format("offset type in due_date_offset field is {0}", offset_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.When("post task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    testRunner.Then("status code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("response body from create task should be valid according to json schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("I delete task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create task inserting only storage id")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateTask")]
        [Xunit.TraitAttribute("Description", "Create task inserting only storage id")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storagetestidfirst356", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "storageiddoesntexist", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "idalreadycreated", new string[0])]
        public void CreateTaskInsertingOnlyStorageId(string requesting_User_Type, string storage_Id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("storage_id", storage_Id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create task inserting only storage id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 55
    testRunner.And(string.Format("requesting user type which will be used for creating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And(string.Format("storage id which will be used for creating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
    testRunner.When("post task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("status code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And("response body from create task should be valid according to json schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.And("I delete task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create task using forbidden user types")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateTask")]
        [Xunit.TraitAttribute("Description", "Create task using forbidden user types")]
        [Xunit.InlineDataAttribute("PARTICIPANT", "storagetestidfirst733", new string[0])]
        [Xunit.InlineDataAttribute("EMPLOYER", "storagetestidsecond848", new string[0])]
        public void CreateTaskUsingForbiddenUserTypes(string requesting_User_Type, string storage_Id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("storage_id", storage_Id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create task using forbidden user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 68
    testRunner.And(string.Format("requesting user type which will be used for creating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And(string.Format("storage id which will be used for creating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.When("post task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
    testRunner.Then("status code should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.And("response body from forbidden create task request should has message \"Access to th" +
                        "is resource is denied.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.And("error code should be \"TASK_MGMT_INVALID_ACCESS_RIGHTS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create task inserting incorrect data")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateTask")]
        [Xunit.TraitAttribute("Description", "Create task inserting incorrect data")]
        [Xunit.InlineDataAttribute("", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Field cannot be empty", "requesting_user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Field cannot be empty", "requesting_user_type", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Field cannot be empty", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "doesnt_exist", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "User with this ID doesnt exist", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "\'Task Storage Id\' must not be empty.", "storage_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "150", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Field is out of range of allowed values.", "priority", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "-150", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Task Priority\' must be greater than or equal to \'0\'.", "priority", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "900", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Field is out of range of allowed values.", "percent_complete", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "-900", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "\'Task Percent Complete\' must be greater than or equal to \'0\'", "percent_complete", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "notexist", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Chosen Outcome must be from Possible Ouctcomes", "", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023-06-29T13:50:20.767", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Date time value must be in UTC format.", "start_date_time", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Date time value must be in UTC format.", "due_date_time", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023-07-17", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-07-17", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "10:35", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "10:35", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023‐07‐13T14:24:35Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023‐07‐13T14:24:35", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023‐07‐13T14:24:35.123", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023‐07‐13T14:24:35Z+01", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "40", "good", "string", "good", "me", "2023‐07‐13T14:24:35.123Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "text", "name1", "name2", "2", "5", "CALENDAR_DAYS", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "51", "5", "CALENDAR_DAYS", "DueDateTime and DueDateOffset are mutually exclusive. Only one of these values ca" +
            "n be present in the request.", "", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "-2", "5", "CALENDAR_DAYS", "DueDateTime and DueDateOffset are mutually exclusive. Only one of these values ca" +
            "n be present in the request.", "", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "5", "TEXT", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "visma_idella_pd", "bad-request-id-212", "25", "85", "good", "string", "good", "me", "2023-06-29T13:50:20.767Z", "2023-06-29T13:50:20.767Z", "true", "name1", "name2", "2", "", "CALENDAR_DAYS", "DueDateTime and DueDateOffset are mutually exclusive. Only one of these values ca" +
            "n be present in the request.", "", new string[0])]
        public void CreateTaskInsertingIncorrectData(
                    string requesting_User_Id, 
                    string requesting_User_Type, 
                    string header_User_Id, 
                    string storage_Id, 
                    string priority, 
                    string percent_Complete, 
                    string possible_Outcome1, 
                    string possible_Outcome2, 
                    string chosen_Outcome, 
                    string assigned_To, 
                    string start_Date_Time, 
                    string due_Date_Time, 
                    string require_Chosen_Outcome, 
                    string reviewer1, 
                    string reviewer2, 
                    string minimum_Reviewers, 
                    string number_Of_Days, 
                    string offset_Type, 
                    string message, 
                    string field, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("header_user_id", header_User_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("priority", priority);
            argumentsOfScenario.Add("percent_complete", percent_Complete);
            argumentsOfScenario.Add("possible_outcome1", possible_Outcome1);
            argumentsOfScenario.Add("possible_outcome2", possible_Outcome2);
            argumentsOfScenario.Add("chosen_outcome", chosen_Outcome);
            argumentsOfScenario.Add("assigned_to", assigned_To);
            argumentsOfScenario.Add("start_date_time", start_Date_Time);
            argumentsOfScenario.Add("due_date_time", due_Date_Time);
            argumentsOfScenario.Add("require_chosen_outcome", require_Chosen_Outcome);
            argumentsOfScenario.Add("reviewer1", reviewer1);
            argumentsOfScenario.Add("reviewer2", reviewer2);
            argumentsOfScenario.Add("minimum_reviewers", minimum_Reviewers);
            argumentsOfScenario.Add("number_of_days", number_Of_Days);
            argumentsOfScenario.Add("offset_type", offset_Type);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("field", field);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create task inserting incorrect data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 80
    testRunner.Given(string.Format("bad requesting user id which will be used for creating task is {0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
    testRunner.And(string.Format("requesting user type which will be used for creating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.And(string.Format("bad header user id which will be used for creating task is {0}", header_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.And(string.Format("storage id which will be used for creating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And(string.Format("priority which will be used for creating task is {0}", priority), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And(string.Format("percent complete which will be used for creating task is {0}", percent_Complete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And(string.Format("possible outcomes which will be used for creating task are {0} {1}", possible_Outcome1, possible_Outcome2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And(string.Format("chosen outcome which will be used for creating task is {0}", chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
    testRunner.And(string.Format("start date time which will be used for creating task is {0}", start_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
    testRunner.And(string.Format("due date time which will be used for creating task is {0}", due_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
    testRunner.And(string.Format("require chosen outcome is {0}", require_Chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
    testRunner.And(string.Format("reviewers are {0} {1}", reviewer1, reviewer2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.And(string.Format("number of minimum reviewers is {0}", minimum_Reviewers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
    testRunner.And(string.Format("number of days in due_date_offset field is {0}", number_Of_Days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.And(string.Format("offset type in due_date_offset field is {0}", offset_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.When("post task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
    testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And(string.Format("response body from bad create task request should has message {0} in the field {1" +
                            "}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And("error code should be \"TASKMGMT_INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Send empty request body")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateTask")]
        [Xunit.TraitAttribute("Description", "Send empty request body")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "Request body cannot be parsed.", "Body", new string[0])]
        public void SendEmptyRequestBody(string requesting_User_Type, string message, string field, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("field", field);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send empty request body", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 130
    testRunner.And(string.Format("requesting user type which will be used for creating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.When("empty request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
    testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
    testRunner.And(string.Format("response body from bad create task request should has message {0} in the field {1" +
                            "}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateTaskFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateTaskFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
