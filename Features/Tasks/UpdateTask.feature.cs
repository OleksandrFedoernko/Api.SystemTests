// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VismaIdella.Vips.TaskManagement.Api.SystemTests.Features.Tasks
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UpdateTaskFeature : object, Xunit.IClassFixture<UpdateTaskFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UpdateTask.feature"
#line hidden
        
        public UpdateTaskFeature(UpdateTaskFeature.FixtureData fixtureData, VismaIdella_Vips_TaskManagement_Api_SystemTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Tasks", "UpdateTask", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
    testRunner.Given("requesting user id which will be used for creating task for upd is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.And("header user id which will be used for creating task for upd is is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
    testRunner.And("requesting user type which will be used for creating task for upd is \"BACKOFFICE_" +
                    "PROFESSIONAL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
    testRunner.And("storage id which will be used for creating task for upd is \"testid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.When("post task request for upd is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
    testRunner.And("I save task id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update task using BACKOFFICE PROFESSIONAL and CLIENT SYSTEM user types", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateTask")]
        [Xunit.TraitAttribute("Description", "Update task using BACKOFFICE PROFESSIONAL and CLIENT SYSTEM user types")]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "changed whole task", "f6300e7a-50e5-4ced-a75f-b4aa38a715e5", "storagetestidsecond848", "updRefId", "updCorId", "updCausId", "updOrigin", "updTitle", "upd desc of a task", "updIcon", "https://updEnt", "85", "12", "good", "ok", "good", "upduser1", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "newcomment", "f6300e7a-50e5-4ced-a75f-b4aa38a715e5", "storagetestidsecond848", "updRefId", "updCorId", "updCausId", "updOrigin", "updTitle", "upd desc of a task", "updIcon", "https://updEnt", "11", "12", "good", "ok", "ok", "upduser1", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "", "5fe1b2a3-161b-4450-8b9f-98a14d30a2bf", "storagetestidfirst733", "updRefId", "updCorId", "updCausId", "updOrigin", "updTitle", "upd desc of a task", "updIcon", "https://updEnt", "80", "10", "bad", "allright", "bad", "upduser2", "2023-08-15T12:50:14.6155887Z", "2023-08-11T12:50:14.6155887Z", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "", "5fe1b2a3-161b-4450-8b9f-98a14d30a2bf", "storagetestidfirst733", "updRefId", "updCorId", "updCausId", "updOrigin", "updTitle", "upd desc of a task", "updIcon", "https://updEnt", "25", "100", "excellent", "horrific", "horrific", "upduser3", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", new string[0])]
        public void UpdateTaskUsingBACKOFFICEPROFESSIONALAndCLIENTSYSTEMUserTypes(
                    string requesting_User_Type, 
                    string comment, 
                    string task_Id, 
                    string storage_Id, 
                    string reference_Id, 
                    string correlation_Id, 
                    string causation_Id, 
                    string origin, 
                    string title, 
                    string description, 
                    string icon, 
                    string related_Entity, 
                    string priority, 
                    string percent_Complete, 
                    string possible_Outcome1, 
                    string possible_Outcome2, 
                    string chosen_Outcome, 
                    string assigned_To, 
                    string start_Date_Time, 
                    string due_Date_Time, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("comment", comment);
            argumentsOfScenario.Add("task_id", task_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("reference_id", reference_Id);
            argumentsOfScenario.Add("correlation_id", correlation_Id);
            argumentsOfScenario.Add("causation_id", causation_Id);
            argumentsOfScenario.Add("origin", origin);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("icon", icon);
            argumentsOfScenario.Add("related_entity", related_Entity);
            argumentsOfScenario.Add("priority", priority);
            argumentsOfScenario.Add("percent_complete", percent_Complete);
            argumentsOfScenario.Add("possible_outcome1", possible_Outcome1);
            argumentsOfScenario.Add("possible_outcome2", possible_Outcome2);
            argumentsOfScenario.Add("chosen_outcome", chosen_Outcome);
            argumentsOfScenario.Add("assigned_to", assigned_To);
            argumentsOfScenario.Add("start_date_time", start_Date_Time);
            argumentsOfScenario.Add("due_date_time", due_Date_Time);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update task using BACKOFFICE PROFESSIONAL and CLIENT SYSTEM user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("requesting user id which will be used for updating task is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.And("header user id which will be used for updating task is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.And(string.Format("requesting user type which will be used for updating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And(string.Format("comment which will be added to history table of the task operation is {0}", comment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And(string.Format("task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And(string.Format("reference id which will be used for updating task is {0}", reference_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And(string.Format("correlation id which will be used for updating task is {0}", correlation_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And(string.Format("causation id which will be used for updating task is {0}", causation_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And(string.Format("name of the process which will be used for updating task is {0}", origin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And(string.Format("title which will be used for updating task is {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And(string.Format("description which will be used updating task is {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And(string.Format("icon which will be used for updating task is {0}", icon), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And(string.Format("related entity which will be used for updating task is {0}", related_Entity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And(string.Format("priority which will be used for updating task is {0}", priority), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.And(string.Format("percent complete which will be used for updating task is {0}", percent_Complete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And(string.Format("possible outcomes which will be used for updating task are {0}, {1}", possible_Outcome1, possible_Outcome2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And(string.Format("chosen outcome which will be used for updating task is {0}", chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And(string.Format("assigned to which will be used for updating task task is {0}", assigned_To), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And(string.Format("start date time which will be used for updating task is {0}", start_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And(string.Format("due date time which will be used for updating task is {0}", due_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.When("update task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.And("response body from update task should be valid according to the JSON schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="update task by inserting only storage id", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateTask")]
        [Xunit.TraitAttribute("Description", "update task by inserting only storage id")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "ad61db25-48be-4cc6-82f5-202b079b01c6", "storagetestidfirst733", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "b12c7aa9-4d5e-48d6-82a8-02a2f22537a1", "newstorageids", new string[0])]
        public void UpdateTaskByInsertingOnlyStorageId(string requesting_User_Type, string task_Id, string storage_Id, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("task_id", task_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("update task by inserting only storage id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 46
    testRunner.Given("requesting user id which will be used for updating task is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
    testRunner.And("header user id which will be used for updating task is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And(string.Format("requesting user type which will be used for updating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.And(string.Format("task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.When("update task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.And("response body from update task should be valid according to the JSON schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update task using EMPLOYER and PARTICIPANT user types", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateTask")]
        [Xunit.TraitAttribute("Description", "Update task using EMPLOYER and PARTICIPANT user types")]
        [Xunit.InlineDataAttribute("testid2", "PARTICIPANT", "e2a5e623-ecac-4b77-809b-0b797064e6af", "participant-storage-testid2", "updRefId", "updCorId", "updCausId", "updOrigin", "updTitle", "upd desc of a task for part", "updIcon", "https://updEntPart", "85", "12", "good", "wonderful", "wonderful", "upduserPart", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", new string[0])]
        [Xunit.InlineDataAttribute("testid1", "EMPLOYER", "bdc65fc9-ec29-4faa-8e0a-65bbf30a781b", "employer-storage-testid1", "updRefId", "updCorId", "updCausId", "updOrigin", "updTitle", "upd desc of a task for emp", "updIcon", "https://updEntEmp", "85", "12", "good", "ok", "good", "upduserEmpl", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", new string[0])]
        public void UpdateTaskUsingEMPLOYERAndPARTICIPANTUserTypes(
                    string requesting_User_Id, 
                    string requesting_User_Type, 
                    string task_Id, 
                    string storage_Id, 
                    string reference_Id, 
                    string correlation_Id, 
                    string causation_Id, 
                    string origin, 
                    string title, 
                    string description, 
                    string icon, 
                    string related_Entity, 
                    string priority, 
                    string percent_Complete, 
                    string possible_Outcome1, 
                    string possible_Outcome2, 
                    string chosen_Outcome, 
                    string assigned_To, 
                    string start_Date_Time, 
                    string due_Date_Time, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("task_id", task_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("reference_id", reference_Id);
            argumentsOfScenario.Add("correlation_id", correlation_Id);
            argumentsOfScenario.Add("causation_id", causation_Id);
            argumentsOfScenario.Add("origin", origin);
            argumentsOfScenario.Add("title", title);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("icon", icon);
            argumentsOfScenario.Add("related_entity", related_Entity);
            argumentsOfScenario.Add("priority", priority);
            argumentsOfScenario.Add("percent_complete", percent_Complete);
            argumentsOfScenario.Add("possible_outcome1", possible_Outcome1);
            argumentsOfScenario.Add("possible_outcome2", possible_Outcome2);
            argumentsOfScenario.Add("chosen_outcome", chosen_Outcome);
            argumentsOfScenario.Add("assigned_to", assigned_To);
            argumentsOfScenario.Add("start_date_time", start_Date_Time);
            argumentsOfScenario.Add("due_date_time", due_Date_Time);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update task using EMPLOYER and PARTICIPANT user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 61
    testRunner.Given(string.Format("requesting user id which will be used for updating task with different params is " +
                            "{0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
    testRunner.And(string.Format("requesting user type which will be used for updating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And(string.Format("task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.And(string.Format("task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.And(string.Format("reference id which will be used for updating task is {0}", reference_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.And(string.Format("correlation id which will be used for updating task is {0}", correlation_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And(string.Format("causation id which will be used for updating task is {0}", causation_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.And(string.Format("name of the process which will be used for updating task is {0}", origin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.And(string.Format("title which will be used for updating task is {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.And(string.Format("description which will be used updating task is {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.And(string.Format("icon which will be used for updating task is {0}", icon), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And(string.Format("related entity which will be used for updating task is {0}", related_Entity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And(string.Format("priority which will be used for updating task is {0}", priority), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And(string.Format("percent complete which will be used for updating task is {0}", percent_Complete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.And(string.Format("possible outcomes which will be used for updating task are {0}, {1}", possible_Outcome1, possible_Outcome2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.And(string.Format("chosen outcome which will be used for updating task is {0}", chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And(string.Format("assigned to which will be used for updating task task is {0}", assigned_To), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And(string.Format("start date time which will be used for updating task is {0}", start_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.And(string.Format("due date time which will be used for updating task is {0}", due_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.When("update task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
    testRunner.Then("status code should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("response body from update task should be valid according to the JSON schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update task using EMPLOYER and PARTICIPANT user types which doesn\'t belong to use" +
            "r")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateTask")]
        [Xunit.TraitAttribute("Description", "Update task using EMPLOYER and PARTICIPANT user types which doesn\'t belong to use" +
            "r")]
        [Xunit.InlineDataAttribute("testid1", "PARTICIPANT", "002fc92d-9555-4950-85ac-79dc7a35695f", "participant-storage-testid2", new string[0])]
        [Xunit.InlineDataAttribute("testid2", "EMPLOYER", "000278f0-da25-42b7-837b-e3f5795e0a8d", "employer-storage-testid1", new string[0])]
        [Xunit.InlineDataAttribute("testId", "EMPLOYER", "07280625-8fce-40b4-a338-560929a7d0fd", "storagetestidfirst733", new string[0])]
        [Xunit.InlineDataAttribute("testid2", "PARTICIPANT", "002fc92d-9555-4950-85ac-79dc7a35695f", "changenameofstorageid", new string[0])]
        [Xunit.InlineDataAttribute("testid1", "EMPLOYER", "000278f0-da25-42b7-837b-e3f5795e0a8d", "changenameofstorageid", new string[0])]
        public void UpdateTaskUsingEMPLOYERAndPARTICIPANTUserTypesWhichDoesntBelongToUser(string requesting_User_Id, string requesting_User_Type, string task_Id, string storage_Id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("task_id", task_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update task using EMPLOYER and PARTICIPANT user types which doesn\'t belong to use" +
                    "r", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 91
    testRunner.Given("requesting user id which will be used for updating task is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
    testRunner.And("header user id which will be used for updating task is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
    testRunner.And(string.Format("requesting user type which will be used for updating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.And(string.Format("wrong task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.When("update task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
    testRunner.Then("status code should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("response body from update task should contain message \"Access to this resource is" +
                        " denied.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.And("error code should be \"INVALID_ACCESS_RIGHTS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update task using incorrect data")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateTask")]
        [Xunit.TraitAttribute("Description", "Update task using incorrect data")]
        [Xunit.InlineDataAttribute("", "BACKOFFICE_PROFESSIONAL", "id", "07280625-8fce-40b4-a338-560929a7d0fd", "storagetestidfirst733", "80", "10", "bad", "allright", "bad", "2023-08-15T12:50:14.6155887Z", "2023-08-11T12:50:14.6155887Z", "Field cannot be empty.", "requesting_user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "25", "100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "Field cannot be empty.", "requesting_user_type", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "25", "100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "Field cannot be empty.", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "notcreated", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "25", "100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "User with this ID doesnt exist.", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "", "25", "100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "\'Task Storage Id\' must not be empty.", "storage_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "-100", "100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "\'Task Priority\' must be greater than or equal to \'0\'.", "priority", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "1000", "100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "Field is out of range of allowed values.", "priority", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "-100", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "\'Task Percent Complete\' must be greater than or equal to \'0\'.", "percent_complete", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "1000", "excellent", "horrific", "horrific", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "Field is out of range of allowed values.", "percent_complete", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "10", "excellent", "horrific", "string", "2023-08-15T12:50:14.6155887Z", "2023-08-25T12:50:14.6155887Z", "Chosen Outcome must be from Possible Ouctcomes.", "", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "10", "excellent", "horrific", "excellent", "20:23", "2023-08-25T12:50:14.6155887Z", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "10", "excellent", "horrific", "excellent", "2023-08-15T12:50:14.6155887Z", "20:23", "Request body cannot be parsed.", "Body", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "10", "excellent", "horrific", "excellent", "2023-08-15T12:50:14", "2023-08-15T12:50:14.6155887Z", "Date time value must be in UTC format.", "start_date_time", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "059d27f1-4134-476d-abd6-f028759cad18", "storagetestidfirst733", "10", "10", "excellent", "horrific", "excellent", "2023-08-15T12:50:14.6155887Z", "2023-08-15T12:50:14", "Date time value must be in UTC format.", "due_date_time", new string[0])]
        public void UpdateTaskUsingIncorrectData(string requesting_User_Id, string requesting_User_Type, string header_User_Id, string task_Id, string storage_Id, string priority, string percent_Complete, string possible_Outcome1, string possible_Outcome2, string chosen_Outcome, string start_Date_Time, string due_Date_Time, string message, string field, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("header_user_id", header_User_Id);
            argumentsOfScenario.Add("task_id", task_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("priority", priority);
            argumentsOfScenario.Add("percent_complete", percent_Complete);
            argumentsOfScenario.Add("possible_outcome1", possible_Outcome1);
            argumentsOfScenario.Add("possible_outcome2", possible_Outcome2);
            argumentsOfScenario.Add("chosen_outcome", chosen_Outcome);
            argumentsOfScenario.Add("start_date_time", start_Date_Time);
            argumentsOfScenario.Add("due_date_time", due_Date_Time);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("field", field);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update task using incorrect data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 109
    testRunner.Given(string.Format("requesting user id which will be used for updating task with different params is " +
                            "{0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
    testRunner.And(string.Format("requesting user type which will be used for updating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
    testRunner.And(string.Format("bad header user id which will be used for updating task is {0}", header_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And(string.Format("wrong task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And(string.Format("priority which will be used for updating task is {0}", priority), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And(string.Format("percent complete which will be used for updating task is {0}", percent_Complete), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.And(string.Format("possible outcomes which will be used for updating task are {0}, {1}", possible_Outcome1, possible_Outcome2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
    testRunner.And(string.Format("chosen outcome which will be used for updating task is {0}", chosen_Outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.And(string.Format("start date time which will be used for updating task is {0}", start_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
    testRunner.And(string.Format("due date time which will be used for updating task is {0}", due_Date_Time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
    testRunner.When("update task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
    testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.And(string.Format("response body from update task should contain message {0} in the field {1}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
    testRunner.And("error code should be \"INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update task which doesn\'t exist")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateTask")]
        [Xunit.TraitAttribute("Description", "Update task which doesn\'t exist")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "doesntexist", "storagetestidfirst733", new string[0])]
        public void UpdateTaskWhichDoesntExist(string requesting_User_Type, string task_Id, string storage_Id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("task_id", task_Id);
            argumentsOfScenario.Add("storage_id", storage_Id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update task which doesn\'t exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 142
    testRunner.Given("requesting user id which will be used for updating task is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
    testRunner.And("header user id which will be used for updating task is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.And(string.Format("requesting user type which will be used for updating task is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
    testRunner.And(string.Format("wrong task id which will be used for updating task is {0}", task_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
    testRunner.And(string.Format("storage id which will be used for updating task is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
    testRunner.When("update task request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
    testRunner.Then("status code should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
    testRunner.And("response body from update task should contain not found message \"Resource Not Fou" +
                        "nd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
    testRunner.And("error code should be \"INVALID_RESOURCE_REQUESTED\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UpdateTaskFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UpdateTaskFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
