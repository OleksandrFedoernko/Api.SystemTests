// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VismaIdella.Vips.TaskManagement.Api.SystemTests.Features.Tasks
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetAllTasksFeature : object, Xunit.IClassFixture<GetAllTasksFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetAllTasks.feature"
#line hidden
        
        public GetAllTasksFeature(GetAllTasksFeature.FixtureData fixtureData, VismaIdella_Vips_TaskManagement_Api_SystemTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Tasks", "GetAllTasks", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
    testRunner.Given("header user id which will be used for getting all tasks is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.And("requesting user id which will be used for getting all tasks is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all tasks using BACKOFFICE_PROFESSIONAL & CLIENT_SYSTEM user types")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllTasks")]
        [Xunit.TraitAttribute("Description", "Get all tasks using BACKOFFICE_PROFESSIONAL & CLIENT_SYSTEM user types")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "2", "", "testId", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "2", "", "testId", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "2", "", "testId", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "2", "", "testId", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "2", "Priority", "testId", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "2", "Priority", "testId", new string[0])]
        public void GetAllTasksUsingBACKOFFICE_PROFESSIONALCLIENT_SYSTEMUserTypes(string requesting_User_Type, string limit, string fields, string created_By, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("fields", fields);
            argumentsOfScenario.Add("created_by", created_By);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all tasks using BACKOFFICE_PROFESSIONAL & CLIENT_SYSTEM user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 8
    testRunner.And(string.Format("requesting user type which will be used for getting all tasks is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And(string.Format("limit which will be used for getting all tasks is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.And(string.Format("fields which will be used for getting all tasks is {0}", fields), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.When("get all tasks request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
    testRunner.And(string.Format("response body from get all tasks should be equal to <storage_id> {0}", created_By), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all tasks using PARTICIPANT & EMPLOYER user types")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllTasks")]
        [Xunit.TraitAttribute("Description", "Get all tasks using PARTICIPANT & EMPLOYER user types")]
        [Xunit.InlineDataAttribute("testid2", "PARTICIPANT", "2", "", "testid2", new string[0])]
        [Xunit.InlineDataAttribute("testid1", "EMPLOYER", "2", "", "testid1", new string[0])]
        [Xunit.InlineDataAttribute("testid2", "PARTICIPANT", "2", "participant-storage-testid2", "testId", new string[0])]
        [Xunit.InlineDataAttribute("testid1", "EMPLOYER", "2", "employer-storage-testid1", "testId", new string[0])]
        public void GetAllTasksUsingPARTICIPANTEMPLOYERUserTypes(string requesting_User_Id, string requesting_User_Type, string limit, string storage_Id, string created_By, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("storage_id", storage_Id);
            argumentsOfScenario.Add("created_by", created_By);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all tasks using PARTICIPANT & EMPLOYER user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 24
    testRunner.Given(string.Format("requesting user ids which will be used for getting tasks for another user types {" +
                            "0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
    testRunner.And(string.Format("requesting user type which will be used for getting all tasks is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And(string.Format("limit which will be used for getting all tasks is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And(string.Format("storage id which will be used for getting all storages is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.When("get all tasks request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And(string.Format("response body from get all tasks should be equal to {0} {1}", storage_Id, created_By), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all tasks by providing other user types")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllTasks")]
        [Xunit.TraitAttribute("Description", "Get all tasks by providing other user types")]
        [Xunit.InlineDataAttribute("PARTICIPANT", "0", "employer-storage-testid1", new string[0])]
        [Xunit.InlineDataAttribute("EMPLOYER", "0", "participant-storage-testid2", new string[0])]
        [Xunit.InlineDataAttribute("PARTICIPANT", "0", "participant-storage-testid2", new string[0])]
        [Xunit.InlineDataAttribute("EMPLOYER", "0", "employer-storage-testid1", new string[0])]
        public void GetAllTasksByProvidingOtherUserTypes(string requesting_User_Type, string limit, string storage_Id, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("storage_id", storage_Id);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all tasks by providing other user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 39
    testRunner.And(string.Format("requesting user type which will be used for getting all tasks is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.And(string.Format("limit which will be used for getting all tasks is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.And(string.Format("storage id which will be used for getting all storages is {0}", storage_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.When("get all tasks request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
    testRunner.Then("status code should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.And("forbidden request message from get all tasks request should have text \"Access to " +
                        "this resource is denied.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("error code should be \"INVALID_ACCESS_RIGHTS\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all tasks by providing wrong data")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllTasks")]
        [Xunit.TraitAttribute("Description", "Get all tasks by providing wrong data")]
        [Xunit.InlineDataAttribute("", "BACKOFFICE_PROFESSIONAL", "id", "0", "", "requesting_user_id", "Field cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("testId", "", "id", "0", "", "requesting_user_type", "Field cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "", "0", "", "user_id", "Field cannot be empty.", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "useriddoesntexist", "0", "", "user_id", "User with this ID doesn\'t exist.", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "-1", "", "limit", "\'Limit\' must be greater than or equal to \'1\'.", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "10001", "", "limit", "\'Limit\' must be less than or equal to \'1000\'.", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "0", "fielddoesntexist", "fields[0]", "One or more fields are not valid for this entity", new string[0])]
        public void GetAllTasksByProvidingWrongData(string requesting_User_Id, string requesting_User_Type, string header_User_Id, string limit, string fields, string field, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("header_user_id", header_User_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("fields", fields);
            argumentsOfScenario.Add("field", field);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all tasks by providing wrong data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 54
    testRunner.Given(string.Format("requesting user ids which will be used for getting tasks for another user types {" +
                            "0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
    testRunner.And(string.Format("requesting user type which will be used for getting all tasks is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And(string.Format("wrong header user id which will be used for getting all tasks is {0}", header_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
    testRunner.And(string.Format("limit which will be used for getting all tasks is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.And("storage id which will be used for getting all storages is <storage_id>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.And(string.Format("fields which will be used for getting all tasks is {0}", fields), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.When("get all tasks request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.And(string.Format("bad request message from get all tasks request should have text {0} in the field " +
                            "{1}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("error code should be \"INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetAllTasksFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetAllTasksFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
