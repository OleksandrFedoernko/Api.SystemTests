// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VismaIdella.Vips.TaskManagement.Api.SystemTests.Features.Storages
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetAllStoragesFeature : object, Xunit.IClassFixture<GetAllStoragesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetAllStorages.feature"
#line hidden
        
        public GetAllStoragesFeature(GetAllStoragesFeature.FixtureData fixtureData, VismaIdella_Vips_TaskManagement_Api_SystemTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Storages", "GetAllStorages", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("header user id which will be used for getting all storages is \"id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("requesting user id which will be used for getting all storages is \"testId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all storages using CLIENT_SYSTEM and BACKOFFICE_PROFESSIONAL user types")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllStorages")]
        [Xunit.TraitAttribute("Description", "Get all storages using CLIENT_SYSTEM and BACKOFFICE_PROFESSIONAL user types")]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "2", "BackofficeName", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "2", "ClientSystemName", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "0", "BackofficeName", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "0", "ClientSystemName", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "2", "", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "2", "", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("BACKOFFICE_PROFESSIONAL", "0", "", "Icon.png", new string[0])]
        [Xunit.InlineDataAttribute("CLIENT_SYSTEM", "0", "", "Icon.png", new string[0])]
        public void GetAllStoragesUsingCLIENT_SYSTEMAndBACKOFFICE_PROFESSIONALUserTypes(string requesting_User_Type, string limit, string name, string icon, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("icon", icon);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all storages using CLIENT_SYSTEM and BACKOFFICE_PROFESSIONAL user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 9
 testRunner.And(string.Format("requesting user type which will be used for getting all storages is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("limit which will be used for getting all storages is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("name which will be used for getting all storages is {0}", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.When("get all storages request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.And(string.Format("response body from get all storages from backoffice and client system user types " +
                            "should be equal to  {0} {1}", name, icon), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all storages using PARTICIPANT and EMPLOYER user types")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllStorages")]
        [Xunit.TraitAttribute("Description", "Get all storages using PARTICIPANT and EMPLOYER user types")]
        [Xunit.InlineDataAttribute("participant_123", "PARTICIPANT", "2", "articipantTestName", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("employer_321", "EMPLOYER", "2", "employerTestName", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("participant_123", "PARTICIPANT", "0", "participantTestName", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("employer_321", "EMPLOYER", "0", "employerTestName", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("participant_123", "PARTICIPANT", "2", "", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("employer_321", "EMPLOYER", "2", "", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("participant_123", "PARTICIPANT", "0", "", "TestIcon.png", new string[0])]
        [Xunit.InlineDataAttribute("employer_321", "EMPLOYER", "0", "", "TestIcon.png", new string[0])]
        public void GetAllStoragesUsingPARTICIPANTAndEMPLOYERUserTypes(string requesting_User_Id, string requesting_User_Type, string limit, string name, string icon, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("icon", icon);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all storages using PARTICIPANT and EMPLOYER user types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 27
 testRunner.Given(string.Format("requesting user id which will be used for getting all storages with other user ty" +
                            "pes {0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.And(string.Format("requesting user type which will be used for getting all storages is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And(string.Format("limit which will be used for getting all storages is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And(string.Format("name which will be used for getting all storages is {0}", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When("get all storages request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And(string.Format("response body from get all storages from employer and participant user types shou" +
                            "ld be equal to {0} {1}", name, icon), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all storages returns epmty list")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllStorages")]
        [Xunit.TraitAttribute("Description", "Get all storages returns epmty list")]
        [Xunit.InlineDataAttribute("PARTICIPANT", "0", new string[0])]
        [Xunit.InlineDataAttribute("EMPLOYER", "0", new string[0])]
        public void GetAllStoragesReturnsEpmtyList(string requesting_User_Type, string limit, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("limit", limit);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all storages returns epmty list", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 46
 testRunner.And(string.Format("requesting user type which will be used for getting all storages is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And(string.Format("limit which will be used for getting all storages is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.When("get all storages request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.And("response body from get all storages from with incorrect user IDs should have empt" +
                        "y list of storages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all storages using wrong data")]
        [Xunit.TraitAttribute("FeatureTitle", "GetAllStorages")]
        [Xunit.TraitAttribute("Description", "Get all storages using wrong data")]
        [Xunit.InlineDataAttribute("", "BACKOFFICE_PROFESSIONAL", "id", "0", "Field cannot be empty", "requesting_user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "", "id", "0", "Field cannot be empty", "requesting_user_type", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "", "0", "Field cannot be empty", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "doesntexist", "0", "User with this ID doesnt exist", "user_id", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "-1", "\'Limit\' must be greater than or equal to \'1\'.", "limit", new string[0])]
        [Xunit.InlineDataAttribute("testId", "BACKOFFICE_PROFESSIONAL", "id", "10001", "\'Limit\' must be less than or equal to \'1000\'.", "limit", new string[0])]
        public void GetAllStoragesUsingWrongData(string requesting_User_Id, string requesting_User_Type, string user_Id, string limit, string message, string field, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("requesting_user_id", requesting_User_Id);
            argumentsOfScenario.Add("requesting_user_type", requesting_User_Type);
            argumentsOfScenario.Add("user_id", user_Id);
            argumentsOfScenario.Add("limit", limit);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("field", field);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all storages using wrong data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 57
 testRunner.Given(string.Format("requesting user id which will be used for getting all storages with other user ty" +
                            "pes {0}", requesting_User_Id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.And(string.Format("requesting user type which will be used for getting all storages is {0}", requesting_User_Type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("wrong header user id which will be used for getting all storages is <header_user_" +
                        "id>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And(string.Format("limit which will be used for getting all storages is {0}", limit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.When("get all storages request is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Then("status code should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.And(string.Format("bad request message from get all storages request should have text {0} in the fie" +
                            "ld {1}", message, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("error code should be \"TASKMGMT_INVALID_MODEL_RECIEVED_BAD_REQUEST\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetAllStoragesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetAllStoragesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
